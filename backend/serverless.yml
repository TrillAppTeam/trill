# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: trill-main
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-domain-manager

custom: 
  secrets: ${file(.secrets.yml)}
  exportGitVariables: false
  customDomain:
    apiType: http
    domainName: 'api.trytrill.com'
    basePath: main
    stage: dev
    endpointType: regional
    region: ${self:provider.region}
    certificateName: "*.trytrill.com"
    createRoute53Record: true


provider:
  name: aws
  runtime: go1.x
  httpApi:
    disableDefaultEndpoint: true
    shouldStartNameWithService: true
    authorizers:
      customAuthorizer:
        type: request
        functionName: auth
  environment:
    MYSQLHOST: ${self:custom.secrets.MYSQLHOST}
    MYSQLPORT: ${self:custom.secrets.MYSQLPORT}
    MYSQLUSER: ${self:custom.secrets.MYSQLUSER}
    MYSQLPASS: ${self:custom.secrets.MYSQLPASS}
    MYSQLDATABASE: ${self:custom.secrets.MYSQLDATABASE}
    COGNITO_APP_CLIENT_ID: ${self:custom.secrets.COGNITO_APP_CLIENT_ID}
    COGNITO_USER_POOL_ID: ${self:custom.secrets.COGNITO_USER_POOL_ID}
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  auth:
    handler: bin/auth
  hello:
    handler: bin/hello
    events:
      - httpApi:
          path: /hello
          method: get
          authorizer: 
            name: customAuthorizer
  world:
    handler: bin/world
    events:
      - httpApi:
          path: /world
          method: get
          authorizer:
            name: customAuthorizer
  users:
    handler: bin/users
    events:
      - httpApi:
          path: /users
          method: get
          authorizer: 
            name: customAuthorizer
      - httpApi:
          path: /users
          method: post
          authorizer: 
            name: customAuthorizer
  # albums:
  #   handler: bin/albums
  #   events:
  #     - httpApi:
  #         path: /albums
  #         method: get
  #         authorizer:
  #           name: customAuthorizer
  # album:
  #   handler: bin/album
  #   events:
  #     - httpApi:
  #         path: /album
  #         method: get
  #         authorizer:
  #           name: customAuthorizer

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
